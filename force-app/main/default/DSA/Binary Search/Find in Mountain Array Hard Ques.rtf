{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red15\green112\blue1;\red255\green255\blue255;\red0\green0\blue0;
\red0\green0\blue255;\red32\green108\blue135;\red101\green76\blue29;\red0\green0\blue109;\red19\green118\blue70;
\red157\green0\blue210;}
{\*\expandedcolortbl;;\cssrgb\c0\c50196\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c100000;\cssrgb\c14902\c49804\c60000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;\cssrgb\c3529\c52549\c34510;
\cssrgb\c68627\c0\c85882;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // Find in Mountain Array leetcode hard Question\
//https://leetcode.com/problems/find-in-mountain-array/description/\
\
\
\
\
/**\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * // This is MountainArray's API interface.\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * // You should not implement it, or speculate about its implementation\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * interface MountainArray \{\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *     public int get(int index) \{\}\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *     public int length() \{\}\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  * \}\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  */\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3  \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 class\cf0 \strokec4  \cf6 \strokec6 Solution\cf0 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf5 \strokec5 public\cf0 \strokec4  \cf6 \strokec6 int\cf0 \strokec4  \cf7 \strokec7 findInMountainArray\cf0 \strokec4 (\cf6 \strokec6 int\cf0 \strokec4  \cf8 \strokec8 target\cf0 \strokec4 , \cf6 \strokec6 MountainArray\cf0 \strokec4  \cf8 \strokec8 mountainArr\cf0 \strokec4 ) \{\cb1 \
\cb3         \cf6 \strokec6 int\cf0 \strokec4  \cf8 \strokec8 peak\cf0 \strokec4 =\cf7 \strokec7 findPeakElement\cf0 \strokec4 (mountainArr);\cb1 \
\cb3         \cf6 \strokec6 int\cf0 \strokec4  \cf8 \strokec8 firstTry\cf0 \strokec4 =\cf7 \strokec7 searchTarget\cf0 \strokec4 (mountainArr,target,\cf9 \strokec9 0\cf0 \strokec4 ,peak);\cb1 \
\cb3         \cf10 \strokec10 if\cf0 \strokec4 (firstTry!=-\cf9 \strokec9 1\cf0 \strokec4 )\{\cb1 \
\cb3             \cf10 \strokec10 return\cf0 \strokec4  firstTry;\cb1 \
\cb3         \}\cf10 \strokec10 else\cf0 \strokec4 \{\cb1 \
\cb3             \cf10 \strokec10 return\cf0 \strokec4  \cf7 \strokec7 searchTarget\cf0 \strokec4 (mountainArr,target,peak+\cf9 \strokec9 1\cf0 \strokec4 ,\cf8 \strokec8 mountainArr\cf0 \strokec4 .\cf7 \strokec7 length\cf0 \strokec4 ()-\cf9 \strokec9 1\cf0 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3     \}\cb1 \
\cb3     \cf5 \strokec5 public\cf0 \strokec4  \cf6 \strokec6 int\cf0 \strokec4  \cf7 \strokec7 findPeakElement\cf0 \strokec4 (\cf6 \strokec6 MountainArray\cf0 \strokec4  \cf8 \strokec8 arr\cf0 \strokec4 ) \{\cb1 \
\cb3         \cf6 \strokec6 int\cf0 \strokec4  \cf8 \strokec8 start\cf0 \strokec4  = \cf9 \strokec9 0\cf0 \strokec4 ;\cb1 \
\cb3         \cf6 \strokec6 int\cf0 \strokec4  \cf8 \strokec8 end\cf0 \strokec4  = \cf8 \strokec8 arr\cf0 \strokec4 .\cf7 \strokec7 length\cf0 \strokec4 () - \cf9 \strokec9 1\cf0 \strokec4 ;\cb1 \
\
\cb3         \cf10 \strokec10 while\cf0 \strokec4  (start < end) \{\cb1 \
\cb3             \cf6 \strokec6 int\cf0 \strokec4  \cf8 \strokec8 mid\cf0 \strokec4  = start + (end - start) / \cf9 \strokec9 2\cf0 \strokec4 ;\cb1 \
\
\cb3             \cf10 \strokec10 if\cf0 \strokec4  (\cf8 \strokec8 arr\cf0 \strokec4 .\cf7 \strokec7 get\cf0 \strokec4 (mid) > \cf8 \strokec8 arr\cf0 \strokec4 .\cf7 \strokec7 get\cf0 \strokec4 (mid + \cf9 \strokec9 1\cf0 \strokec4 )) \{\cb1 \
\cb3                 \cf2 \strokec2 // this might be the answer but look at left for better answer\cf0 \cb1 \strokec4 \
\cb3                 end = mid;\cb1 \
\cb3             \} \cf10 \strokec10 else\cf0 \strokec4  \cf10 \strokec10 if\cf0 \strokec4  (\cf8 \strokec8 arr\cf0 \strokec4 .\cf7 \strokec7 get\cf0 \strokec4 (mid) < \cf8 \strokec8 arr\cf0 \strokec4 .\cf7 \strokec7 get\cf0 \strokec4 (mid + \cf9 \strokec9 1\cf0 \strokec4 )) \{\cb1 \
\cb3                 \cf2 \strokec2 // this means you are in increasing array look at right for better answer\cf0 \cb1 \strokec4 \
\cb3                 start = mid + \cf9 \strokec9 1\cf0 \strokec4 ;\cb1 \
\cb3             \} \cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf10 \strokec10 return\cf0 \strokec4  start;\cb1 \
\cb3         \cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf6 \strokec6 int\cf0 \strokec4  \cf7 \strokec7 searchTarget\cf0 \strokec4 (\cf6 \strokec6 MountainArray\cf0 \strokec4  \cf8 \strokec8 arr\cf0 \strokec4 ,\cf6 \strokec6 int\cf0 \strokec4  \cf8 \strokec8 target\cf0 \strokec4 ,\cf6 \strokec6 int\cf0 \strokec4  \cf8 \strokec8 start\cf0 \strokec4 ,\cf6 \strokec6 int\cf0 \strokec4  \cf8 \strokec8 end\cf0 \strokec4 )\{\cb1 \
\cb3         \cf6 \strokec6 boolean\cf0 \strokec4  \cf8 \strokec8 isAsc\cf0 \strokec4 =\cf8 \strokec8 arr\cf0 \strokec4 .\cf7 \strokec7 get\cf0 \strokec4 (end)>\cf8 \strokec8 arr\cf0 \strokec4 .\cf7 \strokec7 get\cf0 \strokec4 (start);\cb1 \
\
\cb3         \cf10 \strokec10 while\cf0 \strokec4 (start<=end)\{\cb1 \
\cb3             \cf6 \strokec6 int\cf0 \strokec4  \cf8 \strokec8 mid\cf0 \strokec4 =start + (end - start) / \cf9 \strokec9 2\cf0 \strokec4 ;\cb1 \
\
\cb3             \cf10 \strokec10 if\cf0 \strokec4 (target>\cf8 \strokec8 arr\cf0 \strokec4 .\cf7 \strokec7 get\cf0 \strokec4 (mid))\{\cb1 \
\cb3                 \cf10 \strokec10 if\cf0 \strokec4 (isAsc)\{\cb1 \
\cb3                     start=mid+\cf9 \strokec9 1\cf0 \strokec4 ;\cb1 \
\cb3                 \}\cf10 \strokec10 else\cf0 \strokec4 \{\cb1 \
\cb3                     end=mid-\cf9 \strokec9 1\cf0 \strokec4 ;\cb1 \
\cb3                 \}\cb1 \
\cb3             \}\cb1 \
\cb3             \cf10 \strokec10 else\cf0 \strokec4  \cf10 \strokec10 if\cf0 \strokec4 (target<\cf8 \strokec8 arr\cf0 \strokec4 .\cf7 \strokec7 get\cf0 \strokec4 (mid))\{\cb1 \
\cb3                 \cf10 \strokec10 if\cf0 \strokec4 (isAsc)\{\cb1 \
\cb3                     end=mid-\cf9 \strokec9 1\cf0 \strokec4 ;\cb1 \
\cb3                 \}\cf10 \strokec10 else\cf0 \strokec4 \{\cb1 \
\cb3                     start=mid+\cf9 \strokec9 1\cf0 \strokec4 ;\cb1 \
\cb3                 \}\cb1 \
\cb3             \}\cf10 \strokec10 else\cf0 \strokec4 \{\cb1 \
\cb3                 \cf10 \strokec10 return\cf0 \strokec4  mid;\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf10 \strokec10 return\cf0 \strokec4  -\cf9 \strokec9 1\cf0 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
}