{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue255;\red255\green255\blue255;
\red32\green108\blue135;\red101\green76\blue29;\red0\green0\blue109;\red157\green0\blue210;\red19\green118\blue70;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c100000;\cssrgb\c100000\c100000\c100000;
\cssrgb\c14902\c49804\c60000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;\cssrgb\c68627\c0\c85882;\cssrgb\c3529\c52549\c34510;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/\
// Find Minimum in Sorted Rotated Array\
\pard\pardeftab720\partightenfactor0
\cf3 \cb4 \strokec3 class\cf0 \strokec2  \cf5 \strokec5 Solution\cf0 \strokec2  \{\cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb4 \strokec2     \cf3 \strokec3 public\cf0 \strokec2  \cf5 \strokec5 int\cf0 \strokec2  \cf6 \strokec6 findMin\cf0 \strokec2 (\cf5 \strokec5 int\cf0 \strokec2 [] \cf7 \cb4 \strokec7 nums\cf0 \cb4 \strokec2 ) \{\cb1 \strokec2 \
\cb4 \strokec2         \cf5 \strokec5 int\cf0 \strokec2  \cf7 \cb4 \strokec7 pivot\cf0 \cb4 \strokec2  = \cf6 \strokec6 findPivot\cf0 \strokec2 (nums);\cb1 \strokec2 \
\cb4 \strokec2         \cf8 \strokec8 if\cf0 \strokec2  (pivot == \cf7 \cb4 \strokec7 nums\cf0 \cb4 \strokec2 .\cf7 \cb4 \strokec7 length\cf0 \cb4 \strokec2  - \cf9 \strokec9 1\cf0 \strokec2 ) \{\cb1 \strokec2 \
\cb4 \strokec2             \cf8 \strokec8 return\cf0 \strokec2  nums[\cf9 \strokec9 0\cf0 \strokec2 ];\cb1 \strokec2 \
\cb4 \strokec2         \}\cb1 \strokec2 \
\cb4 \strokec2         \cf8 \strokec8 return\cf0 \strokec2  nums[pivot + \cf9 \strokec9 1\cf0 \strokec2 ];\cb1 \strokec2 \
\
\cb4 \strokec2     \}\cb1 \strokec2 \
\
\cb4 \strokec2     \cf5 \strokec5 int\cf0 \strokec2  \cf6 \strokec6 findPivot\cf0 \strokec2 (\cf5 \strokec5 int\cf0 \strokec2 [] \cf7 \cb4 \strokec7 arr\cf0 \cb4 \strokec2 ) \{\cb1 \strokec2 \
\cb4 \strokec2         \cf5 \strokec5 int\cf0 \strokec2  \cf7 \cb4 \strokec7 start\cf0 \cb4 \strokec2  = \cf9 \strokec9 0\cf0 \strokec2 ;\cb1 \strokec2 \
\cb4 \strokec2         \cf5 \strokec5 int\cf0 \strokec2  \cf7 \cb4 \strokec7 end\cf0 \cb4 \strokec2  = \cf7 \cb4 \strokec7 arr\cf0 \cb4 \strokec2 .\cf7 \cb4 \strokec7 length\cf0 \cb4 \strokec2  - \cf9 \strokec9 1\cf0 \strokec2 ;\cb1 \strokec2 \
\
\cb4 \strokec2         \cf8 \strokec8 while\cf0 \strokec2  (start <= end) \{\cb1 \strokec2 \
\cb4 \strokec2             \cf5 \strokec5 int\cf0 \strokec2  \cf7 \cb4 \strokec7 mid\cf0 \cb4 \strokec2  = start + (end - start) / \cf9 \strokec9 2\cf0 \strokec2 ;\cb1 \strokec2 \
\
\cb4 \strokec2             \cf8 \strokec8 if\cf0 \strokec2  (mid < end && arr[mid] > arr[mid + \cf9 \strokec9 1\cf0 \strokec2 ]) \{\cb1 \strokec2 \
\cb4 \strokec2                 \cf8 \strokec8 return\cf0 \strokec2  mid;\cb1 \strokec2 \
\cb4 \strokec2             \} \cf8 \strokec8 else\cf0 \strokec2  \cf8 \strokec8 if\cf0 \strokec2  (mid > start && arr[mid] < arr[mid - \cf9 \strokec9 1\cf0 \strokec2 ]) \{\cb1 \strokec2 \
\cb4 \strokec2                 \cf8 \strokec8 return\cf0 \strokec2  mid - \cf9 \strokec9 1\cf0 \strokec2 ;\cb1 \strokec2 \
\cb4 \strokec2             \} \cf8 \strokec8 else\cf0 \strokec2  \cf8 \strokec8 if\cf0 \strokec2  (arr[start] >= arr[mid]) \{\cb1 \strokec2 \
\cb4 \strokec2                 end = mid - \cf9 \strokec9 1\cf0 \strokec2 ;\cb1 \strokec2 \
\cb4 \strokec2             \} \cf8 \strokec8 else\cf0 \strokec2  \{\cb1 \strokec2 \
\cb4 \strokec2                 start = mid + \cf9 \strokec9 1\cf0 \strokec2 ;\cb1 \strokec2 \
\cb4 \strokec2             \}\cb1 \strokec2 \
\
\cb4 \strokec2         \}\cb1 \strokec2 \
\cb4 \strokec2         \cf8 \strokec8 return\cf0 \strokec2  -\cf9 \strokec9 1\cf0 \strokec2 ;\cb1 \strokec2 \
\
\cb4 \strokec2     \}\cb1 \strokec2 \
\cb4 \strokec2 \}\cb1 \strokec2 \
}