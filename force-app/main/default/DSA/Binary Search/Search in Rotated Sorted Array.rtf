{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;
\red32\green108\blue135;\red101\green76\blue29;\red0\green0\blue109;\red157\green0\blue210;\red19\green118\blue70;
\red15\green112\blue1;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c100000;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c14902\c49804\c60000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;\cssrgb\c68627\c0\c85882;\cssrgb\c3529\c52549\c34510;
\cssrgb\c0\c50196\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww30040\viewh18900\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // Search in Rotated sorted array\
\
class\cf0 \strokec4  \cf5 \strokec5 Solution\cf0 \strokec4  \{\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf2 \strokec2 public\cf0 \strokec4  \cf5 \strokec5 int\cf0 \strokec4  \cf6 \strokec6 search\cf0 \strokec4 (\cf5 \strokec5 int\cf0 \strokec4 [] \cf7 \strokec7 nums\cf0 \strokec4 , \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 target\cf0 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 pivot\cf0 \strokec4  = \cf6 \strokec6 findPivot\cf0 \strokec4 (nums);\cb1 \
\
\cb3         \cf8 \strokec8 if\cf0 \strokec4  (pivot == -\cf9 \strokec9 1\cf0 \strokec4 ) \{\cb1 \
\cb3             \cf8 \strokec8 return\cf0 \strokec4  \cf6 \strokec6 searchForTraget\cf0 \strokec4 (nums, target, \cf9 \strokec9 0\cf0 \strokec4 , \cf7 \strokec7 nums\cf0 \strokec4 .\cf7 \strokec7 length\cf0 \strokec4  - \cf9 \strokec9 1\cf0 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf8 \strokec8 if\cf0 \strokec4  (nums[pivot] == target) \{\cb1 \
\cb3             \cf8 \strokec8 return\cf0 \strokec4  pivot;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf8 \strokec8 if\cf0 \strokec4  (target >= nums[\cf9 \strokec9 0\cf0 \strokec4 ]) \{\cb1 \
\cb3             \cf8 \strokec8 return\cf0 \strokec4  \cf6 \strokec6 searchForTraget\cf0 \strokec4 (nums, target, \cf9 \strokec9 0\cf0 \strokec4 , pivot-\cf9 \strokec9 1\cf0 \strokec4 );\cb1 \
\
\cb3         \}\cb1 \
\cb3         \cf8 \strokec8 return\cf0 \strokec4  \cf6 \strokec6 searchForTraget\cf0 \strokec4 (nums, target, pivot + \cf9 \strokec9 1\cf0 \strokec4 , \cf7 \strokec7 nums\cf0 \strokec4 .\cf7 \strokec7 length\cf0 \strokec4  - \cf9 \strokec9 1\cf0 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\
\
\cb3     \cf5 \strokec5 int\cf0 \strokec4  \cf6 \strokec6 findPivot\cf0 \strokec4 (\cf5 \strokec5 int\cf0 \strokec4 [] \cf7 \strokec7 arr\cf0 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 start\cf0 \strokec4  = \cf9 \strokec9 0\cf0 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 end\cf0 \strokec4  = \cf7 \strokec7 arr\cf0 \strokec4 .\cf7 \strokec7 length\cf0 \strokec4  - \cf9 \strokec9 1\cf0 \strokec4 ;\cb1 \
\cb3         \cf8 \strokec8 while\cf0 \strokec4  (start <= end) \{\cb1 \
\cb3             \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 mid\cf0 \strokec4  = start + (end - start) / \cf9 \strokec9 2\cf0 \strokec4 ;\cb1 \
\
\cb3             \cf8 \strokec8 if\cf0 \strokec4  (mid < end && arr[mid] > arr[mid+\cf9 \strokec9 1\cf0 \strokec4 ]) \{\cb1 \
\cb3                 \cf8 \strokec8 return\cf0 \strokec4  mid;\cb1 \
\cb3             \} \cf8 \strokec8 else\cf0 \strokec4  \cf8 \strokec8 if\cf0 \strokec4  (mid > start && arr[mid] < arr[mid - \cf9 \strokec9 1\cf0 \strokec4 ]) \{\cb1 \
\cb3                 \cf8 \strokec8 return\cf0 \strokec4  mid - \cf9 \strokec9 1\cf0 \strokec4 ;\cb1 \
\cb3             \} \cf8 \strokec8 else\cf0 \strokec4  \cf8 \strokec8 if\cf0 \strokec4  (arr[start] >= arr[mid]) \{\cb1 \
\cb3                 end = mid - \cf9 \strokec9 1\cf0 \strokec4 ;\cb1 \
\cb3             \} \cf8 \strokec8 else\cf0 \strokec4  \{\cb1 \
\cb3                 start = mid + \cf9 \strokec9 1\cf0 \strokec4 ;\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf8 \strokec8 return\cf0 \strokec4  -\cf9 \strokec9 1\cf0 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf5 \strokec5 int\cf0 \strokec4  \cf6 \strokec6 searchForTraget\cf0 \strokec4 (\cf5 \strokec5 int\cf0 \strokec4 [] \cf7 \strokec7 arr\cf0 \strokec4 , \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 target\cf0 \strokec4 , \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 start\cf0 \strokec4 , \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 end\cf0 \strokec4 ) \{\cb1 \
\
\cb3         \cf8 \strokec8 while\cf0 \strokec4  (start <= end) \{\cb1 \
\cb3             \cf5 \strokec5 int\cf0 \strokec4  \cf7 \strokec7 mid\cf0 \strokec4  = start + (end - start) / \cf9 \strokec9 2\cf0 \strokec4 ;\cb1 \
\cb3             \cf8 \strokec8 if\cf0 \strokec4  (target > arr[mid]) \{\cb1 \
\cb3                 start = mid + \cf9 \strokec9 1\cf0 \strokec4 ;\cb1 \
\cb3             \} \cf8 \strokec8 else\cf0 \strokec4  \cf8 \strokec8 if\cf0 \strokec4  (target < arr[mid]) \{\cb1 \
\cb3                 end = mid - \cf9 \strokec9 1\cf0 \strokec4 ;\cb1 \
\cb3             \} \cf8 \strokec8 else\cf0 \strokec4  \{\cb1 \
\cb3                 \cf10 \strokec10 // Answer Found\cf0 \cb1 \strokec4 \
\cb3                 \cf8 \strokec8 return\cf0 \strokec4  mid;\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\cb3         \cf8 \strokec8 return\cf0 \strokec4  -\cf9 \strokec9 1\cf0 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
}